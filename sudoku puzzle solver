def print_grid(grid):
    """Prints the Sudoku grid in a readable format."""
    for row in grid:
        print(" ".join(str(num) if num != 0 else '.' for num in row))

def is_valid(grid, row, col, num):
    """Checks if it's valid to place a number in a specific cell."""
    # Check if the number is not repeated in the row
    if num in grid[row]:
        return False
    
    # Check if the number is not repeated in the column
    if num in (grid[i][col] for i in range(9)):
        return False
    
    # Check if the number is not repeated in the 3x3 sub-grid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if grid[i][j] == num:
                return False
    
    return True

def solve(grid):
    """Solves the Sudoku puzzle using backtracking."""
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num
                        if solve(grid):
                            return True
                        grid[row][col] = 0
                return False
    return True

def get_input():
    """Prompts the user to input a Sudoku puzzle."""
    print("Enter the Sudoku puzzle (use 0 for empty cells):")
    grid = []
    for i in range(9):
        while True:
            try:
                row = list(map(int, input(f"Row {i+1} (separate numbers with spaces): ").strip().split()))
                if len(row) != 9:
                    raise ValueError("Each row must have exactly 9 numbers.")
                if any(num < 0 or num > 9 for num in row):
                    raise ValueError("Numbers must be between 0 and 9.")
                grid.append(row)
                break
            except ValueError as e:
                print(f"Invalid input: {e}. Please try again.")
    return grid

# Main program
puzzle = get_input()
if solve(puzzle):
    print("Sudoku puzzle solved:")
    print_grid(puzzle)
else:
    print("No solution exists.")
